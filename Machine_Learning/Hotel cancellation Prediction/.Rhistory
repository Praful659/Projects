}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
rm(list = ls())
pbank=read.csv("Patriotbank.csv")
summary(pbank)
plot(pbank$Int.rate, pbank$Applications, pch = 16,
xlab="Int.rate",
ylab="Applications")
## Y is logged
pbank$logApp=log(pbank$Applications)
plot(pbank$Int.rate, pbank$logApp, pch = 16,
xlab="Int.rate",
ylab="Log of Applications")
abline(lm(pbank$logApp ~ pbank$Int.rate), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0)
log_level=lm(logApp ~ Int.rate, data=pbank); summary(log_level)
## X is logged
pbank$logInt=log(pbank$Int.rate)
plot(pbank$logInt, pbank$Applications, pch = 16,
xlab="Log of Int.rate",
ylab="Applications")
abline(lm(pbank$Applications ~ pbank$logInt), col="red", lwd="2")
legend(1.5,103, legend="fitted line", col="red", lwd="2", box.lty=0 )
level_log=lm(Applications ~ logInt, data=pbank); summary(level_log)
## both X and Y are logged
plot(pbank$logInt, pbank$logApp, pch = 16,
xlab="Log of Int.rate",
ylab="Log of Applications")
abline(lm(pbank$logApp ~ pbank$logInt), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0 )
log_log=lm(logApp ~ logInt, data=pbank); summary(log_log)
####Q2
####f.)
data_h= data.frame(AGI=92)
predict(sales_model,data_h,interval = "prediction", level=.95)
data = read.csv("PatriotBank.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$Applications)
na.omit(data)
plot(data$Int.rate,data$Applications,
xlab="Intrest Rate",
ylab="No. of Applications",
ylim=c(0,3100), xlim = c(4,10),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
abline(lm(data$Applications ~ data$Int.rate), col = "red")
qt(0.975,28,lower.tail = T)
sales_model=lm(Charitable_Giving ~ AGI, data=data); summary(sales_model)
data = read.csv("PatriotBank.csv")
data = data[c(2:3)]
na.omit(data)
plot(data$Int.rate,data$Applications,
xlab="Intrest Rate",
ylab="No. of Applications",
ylim=c(0,3100), xlim = c(4,10),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
abline(lm(data$Applications ~ data$Int.rate), col = "red")
qt(0.975,28,lower.tail = T)
####Q3
bank = read.csv("PatriotBank.csv")
bank = data[c(2:3)]
plot(bank$Int.rate, bank$Applications, pch = 16,
xlab="Int.rate",
ylab="Applications")
## Y is logged
bank$logApp=log(bank$Applications)
plot(bank$Int.rate, bank$logApp, pch = 16,
xlab="Int.rate",
ylab="Log of Applications")
abline(lm(bank$logApp ~ bank$Int.rate), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0)
log_level=lm(logApp ~ Int.rate, data=bank); summary(log_level)
## X is logged
bank$logInt=log(bank$Int.rate)
plot(bank$logInt, bank$Applications, pch = 16,
xlab="Log of Int.rate",
ylab="Applications")
abline(lm(bank$Applications ~ bank$logInt), col="red", lwd="2")
legend(1.5,103, legend="fitted line", col="red", lwd="2", box.lty=0 )
level_log=lm(Applications ~ logInt, data=bank); summary(level_log)
## both X and Y are logged
plot(bank$logInt, bank$logApp, pch = 16,
xlab="Log of Int.rate",
ylab="Log of Applications")
abline(lm(bank$logApp ~ bank$logInt), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0 )
log_log=lm(logApp ~ logInt, data=bank); summary(log_log)
data = read.csv("IRS.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$AGI)
na.omit(data)
plot(data$AGI,data$Charitable_Giving,
xlab="Advertising Expenditure ($1000)",
ylab="Sales Revenue ($1000)",
ylim=c(3000,16000), xlim = c(50,110),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
data_model=lm(Charitable_Giving ~ AGI, data=data); summary(data_model)
####Q2 f)
data_h= data.frame(AGI=92)
predict(data_model,data_h,interval = "prediction", level=.95)
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
library(rpart)
library(rpart.plot)
library(FactoMineR)
#install.packages("countrycode")
library(countrycode) #used for converting country names and codes from one format to another
library(lubridate) #Date Manipulation
library(pROC)
#install.packages("ROCR")
library(ROCR)
#install.packages("mice")
library(mice)
# for ML:
library(caret)
library(randomForest)
df <- read.csv("hotel_bookings.csv",stringsAsFactors = TRUE)
setwd("/Users/prafulpatil/SPRING 2023/BUAN 6356 BA(R)/Project/Final")
# Read the data
df <- read.csv("hotel_bookings.csv",stringsAsFactors = TRUE)
head(df)
#Understanding the data #Converts character columns to factors
df[sapply(df, is.character)] <-
lapply(df[sapply(df, is.character)], as.factor)
str(df)
summary(df)
# Let us eliminate NA and other undefined value
sum(is.na(df))
#There are totally 4 missing value in the dataset
missfun<- function(x){ #create a function to list each column with the total number of missing values in each
sum(is.na(x))
}
apply(df,2, missfun) #Call the function
summary(df)
#We can observe that children feature consists of 4 missing value, so let us drop the four records
df<-na.omit(df)
# "meal" contains values "Undefined", which is equal to SC.
df$meal <- ifelse(df$meal == "Undefined", "SC", df$meal)
# Some rows contain entreis with 0 adults, 0 children and 0 babies.
# I'm dropping these entries with no guests.
zero_guests <- which(df$adults + df$children + df$babies == 0)
zero_guests
df <- df[-zero_guests, ]
#Undefined values in market_segment and distribution_channel
df <- subset(df, market_segment!='Undefined')
df<- subset(df, distribution_channel!='Undefined')
#Remaining Data
dim(df)
#1) EDA
#We have two levels for Hotel, before moving further for Exploratory Data analysis,
#it is a good idea to have some information about the ratio of preference for City and Resort Hotels
# Check the number of booking at respective hotels
table(df$hotel)
# Visualize the distribution
ggplot(data = df, aes(x = hotel)) +
geom_bar(stat = "count") +
labs(title = "Booking Request by Hotel type",
x = "Hotel type",
y = "No. of bookings") +
theme_classic() + scale_color_brewer(palette = "Set2")
# Check the distribution of hotel type for cancellation
table(df$is_canceled, df$hotel)
# After cleaning, separate Resort and City hotel
# To know the acutal visitor numbers, only bookings that were not canceled are included.
rh <- df[df$hotel == "Resort Hotel" & df$is_canceled == 0, ]
ch <- df[df$hotel == "City Hotel" & df$is_canceled == 0, ]
######################.   Where do guests come from
# get number of acutal guests by country
origin <- df[df$reservation_status == "Check-Out",]
# Subset the data to include the countries which has more than 1500 reservation request
# otherwise including all the country with few or occassional request to avoid the graph
# from being clumsy
type_hotel <- origin %>%
group_by(country) %>%
filter(n() > 1500)
# Visualize the Traveller by Country.
type_hotel$county_name <- countrycode(type_hotel$country,
origin = "iso3c",
destination = "country.name")
# Traveller by Country per hotel wise
ggplot(type_hotel, aes(county_name, fill = hotel)) +
geom_bar(stat = "count", position = position_dodge()) +
labs(title = "Booking Status by Country",
x = "Country",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
panel.background = element_blank())
#Since no currency information is given, but Portugal is part of the European Monetary Union,
#I assume that all prices are in EUR.
# Counting adults and children as paying guests only, not babies.
# Average daily rate by Hotel Type
ggplot(type_hotel, aes(x = adr, fill = hotel, color = hotel)) +
geom_histogram(aes(y = ..density..), position = position_dodge(), binwidth = 20 ) +
geom_density(alpha = 0.2) +
labs(title = "Average Daily rate by Hotel",
x = "Hotel Price(in Euro)",
y = "Count") + scale_color_brewer(palette = "Paired") +
theme_classic() + theme(legend.position = "top")
# boxplot:
ggplot(type_hotel, aes(customer_type, fill = hotel)) +
geom_bar(stat = "count", position = position_dodge()) +
labs(title = "Hotel Preference by Customer Type",
x = "Customer Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
panel.background = element_blank())
#Does the hotel charged differently for different customer type
ggplot(type_hotel, aes(x = customer_type, y = adr, fill = hotel)) +
geom_boxplot(position = position_dodge()) +
labs(title = "Price Charged by Hotel Type",
subtitle = "for Customer Type",
x = "Customer Type",
y = "Price per night(in Euro)") + theme_classic()
#How does the price per night vary over the year?
# Organize the Month in proper order
# load necessary packages
library(dplyr)
library(ggplot2)
library(lubridate)
# subset data and calculate mean room prices by hotel and month
df <- df %>%
filter(is_canceled == 0) %>%
group_by(hotel, arrival_date_month) %>%
summarise(avg_price = mean(adr)) %>%
mutate(arrival_date_month = factor(arrival_date_month, levels = month.name))
# create line plot with standard deviation error bars
ggplot(df, aes(x = arrival_date_month, y = avg_price, color = hotel, group = hotel)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1), geom = "errorbar",
width = 0.2, size = 1, color = "black") +
labs(title = "Room price per night and person over the year",
x = "Month",
y = "Price [EUR]") +
scale_color_manual(values = c("Resort Hotel" = "red", "City Hotel" = "blue")) +
theme_classic() +
theme(legend.position = "top")
df$arrival_date_month <-
factor(df$arrival_date_month, levels = month.name)
# Visualize Hotel traffic on Monthly basis
ggplot(data = df, aes(x = arrival_date_month)) +
geom_bar(fill = "steelblue") +
geom_text(stat = "count", aes(label = ..count..), hjust = 1) +
coord_flip() + labs(title = "Month Wise Booking Request",
x = "Month",
y = "Count") +
theme_classic()
ggplot(df, aes(arrival_date_month, fill = factor(is_canceled))) +
geom_bar() + geom_text(stat = "count", aes(label = ..count..), hjust = 1) +
coord_flip() + scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
label = c("Cancelled", "Not Cancelled")
) +
labs(title = "Booking Status by Month",
x = "Month",
y = "Count") + theme_bw()
############--------------------------Q2 e)--------------------------###########
RSS = sum(data$AGI^2); RSS
data = read.csv("IRS.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$AGI)
na.omit(data)
plot(data$AGI,data$Charitable_Giving,
xlab="Advertising Expenditure ($1000)",
ylab="Sales Revenue ($1000)",
ylim=c(3000,16000), xlim = c(50,110),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
data = read.csv("IRS.csv")
setwd("/Users/prafulpatil/SPRING 2023/BUAN 6359 ADV STATS/Assignment/HW6")
data = read.csv("IRS.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$AGI)
na.omit(data)
plot(data$AGI,data$Charitable_Giving,
xlab="Advertising Expenditure ($1000)",
ylab="Sales Revenue ($1000)",
ylim=c(3000,16000), xlim = c(50,110),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
_
data_model=lm(Charitable_Giving ~ AGI, data=data); summary(data_model)
############--------------------------Q2 f)--------------------------###########
data_h= data.frame(AGI=92)
predict(data_model,data_h,interval = "prediction", level=.95)
pt(0.975,9)
length(data)
length(data$AGI)
11833.6 + 0.8224818*899.4*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*1.05*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*1.09*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*1.9*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*2.3*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*2.8*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.3*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.21*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.29*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.22*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.18*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.09*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.11*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.10*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.109*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.107*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 + 0.822*3.104*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
11833.6 - 0.822*3.104*sqrt((1/length(data$AGI) + (92 - mean(data$AGI)) / (length(data$AGI) - 1)*var(data$AGI)^2))
data_model=lm(Charitable_Giving ~ AGI, data=data); summary(data_model)
############-----------------------Q3 full)--------------------------###########
bank = read.csv("PatriotBank.csv")
plot(bank$Int.rate, bank$Applications, pch = 16,
xlab="Int.rate",
ylab="Applications")
## Y is logged
bank$logApp=log(bank$Applications)
plot(bank$Int.rate, bank$logApp, pch = 16,
xlab="Int.rate",
ylab="Log of Applications")
abline(lm(bank$logApp ~ bank$Int.rate), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0)
## X is logged
bank$logInt=log(bank$Int.rate)
plot(bank$logInt, bank$Applications, pch = 16,
xlab="Log of Int.rate",
ylab="Applications")
abline(lm(bank$Applications ~ bank$logInt), col="red", lwd="2")
legend(1.5,103, legend="fitted line", col="red", lwd="2", box.lty=0 )
level_log=lm(Applications ~ logInt, data=bank); summary(level_log)
## X is logged
bank$logInt=log(bank$Int.rate)
plot(bank$logInt, bank$Applications, pch = 16,
xlab="Log of Int.rate",
ylab="Applications")
abline(lm(bank$Applications ~ bank$logInt), col="red", lwd="2")
legend(1.5,103, legend="fitted line", col="red", lwd="2", box.lty=0 )
level_log=lm(Applications ~ logInt, data=bank); summary(level_log)
## both X and Y are logged
plot(bank$logInt, bank$logApp, pch = 16,
xlab="Log of Int.rate",
ylab="Log of Applications")
abline(lm(bank$logApp ~ bank$logInt), col="red", lwd="2")
legend("bottomright", legend="fitted line", col="red", lwd="2", box.lty=0 )
log_log=lm(logApp ~ logInt, data=bank); summary(log_log)
############--------------------------Q2 f)--------------------------###########
data_h= data.frame(AGI=92)
predict(data_model,data_h,interval = "prediction", level=.95)
data = read.csv("IRS.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$AGI)
na.omit(data)
plot(data$AGI,data$Charitable_Giving,
xlab="Advertising Expenditure ($1000)",
ylab="Sales Revenue ($1000)",
ylim=c(3000,16000), xlim = c(50,110),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
data_model=lm(Charitable_Giving ~ AGI, data=data); summary(data_model)
data = read.csv("IRS.csv")
data = data[c(2:3)]
summary(data)
library(stringr)
class(data$AGI)
na.omit(data)
plot(data$AGI,data$Charitable_Giving,
xlab="Advertising Expenditure ($1000)",
ylab="Sales Revenue ($1000)",
ylim=c(3000,16000), xlim = c(50,110),
cex=1, cex.lab=1.2, cex.axis=1.2, pch=16)
data_model=lm(Charitable_Giving ~ AGI, data=data); summary(data_model)
setwd("/Users/prafulpatil/SPRING 2023/BUAN 6356 BA(R)/Project/Final")
