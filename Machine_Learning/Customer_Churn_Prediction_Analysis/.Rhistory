print(paste(num1, "/", num2, "=", result))
}
},
{
print("Invalid choice.")
}
)
####################Q20 R Program to Sample calculator###################
# Display menu
print("Select operation.")
print("1.Add")
print("2.Subtract")
print("3.Multiply")
print("4.Divide")
# Get operation choice from user
choice <- as.integer(readline(prompt = "Enter choice[1/2/3/4]: "))
# Get input numbers from user
num1 <- as.numeric(readline(prompt = "Enter first number: "))
num2 <- as.numeric(readline(prompt = "Enter second number: "))
# Perform the chosen operation
switch(choice,
'1' = {
result <- num1 + num2
print(paste(num1, "+", num2, "=", result))
},
'2' = {
result <- num1 - num2
print(paste(num1, "-", num2, "=", result))
},
'3' = {
result <- num1 * num2
print(paste(num1, "x", num2, "=", result))
},
'4' = {
if (num2 == 0) {
print("Error: Division by zero.")
} else {
result <- num1 / num2
print(paste(num1, "/", num2, "=", result))
}
},
{
print("Invalid choice.")
}
)
####################Q21 R Program to Sort a Vector###################
# Define a vector
numbers <- c(23, 10, 67, 45, 8, 100, 3)
# Sort the vector in ascending order
sorted_numbers_asc <- sort(numbers)
print("Sorted vector in ascending order:")
print(sorted_numbers_asc)
# Sort the vector in descending order
sorted_numbers_desc <- sort(numbers, decreasing = TRUE)
print("Sorted vector in descending order:")
print(sorted_numbers_desc)
########Q22 Find Sum, Mean and Product of Vector in R Programming###############
# Define a vector
numbers <- c(5, 10, 15, 20, 25)
# Calculate the sum of the vector
sum_of_numbers <- sum(numbers)
print(paste("Sum of the vector:", sum_of_numbers))
# Calculate the mean of the vector
mean_of_numbers <- mean(numbers)
print(paste("Mean of the vector:", mean_of_numbers))
# Calculate the product of the vector using the prod() function
product_of_numbers <- prod(numbers)
print(paste("Product of the vector:", product_of_numbers))
###############Q23 Sum of Natural Numbers Using Recursion#######################
sum_recursive <- function(n) {
if(n == 1) {
return(1)
} else {
return(n + sum_recursive(n - 1))
}
}
# Test the function
number <- 5
result <- sum_recursive(number)
print(paste("Sum of first", number, "natural numbers:", result))
###############Q24 R Program to Find the Sum of Natural Numbers##################
# Take input from the user
num <- as.integer(readline(prompt = "Enter a number: "))
# Initialize sum to 0
sum <- 0
# If the number is negative, prompt the user again
if (num < 0) {
print("Please enter a positive integer.")
} else {
while (num > 0) {
sum <- sum + num
num <- num - 1
}
print(paste("The sum is", sum))
}
##################Q25 R program to take input from a user######################
name <- readline(prompt = "Enter your name: ")
age <- as.integer(readline(prompt = "Enter your age: "))
print(paste("Hello", name, "! You are", age, "years old."))
# Function to find the smallest and largest numbers in each column of a matrix
find_min_max_per_column <- function(matrix) {
apply(matrix, 2, find_min_max)
}
# Function to find the smallest and largest numbers in a vector
find_min_max <- function(vector) {
return(c(min(vector), max(vector)))
}
# Function to find the smallest and largest numbers in each line of a matrix
find_min_max_per_line <- function(matrix) {
apply(matrix, 1, find_min_max)
}
# Function to find the smallest and largest numbers in each column of a matrix
find_min_max_per_column <- function(matrix) {
apply(matrix, 2, find_min_max)
}
# Function to find the smallest and largest numbers in a matrix
find_global_min_max <- function(matrix) {
c(min(matrix), max(matrix))
}
# Sample input matrix
input_matrix <- matrix(c(5, 10, 3, 8, 2, 7, 1, 9, 4, 6), nrow = 5, byrow = TRUE)
# Finding smallest and largest numbers in each line
line_min_max <- find_min_max_per_line(input_matrix)
cat("Smallest and largest numbers in each line:\n")
print(line_min_max)
# Finding smallest and largest numbers in each column
column_min_max <- find_min_max_per_column(input_matrix)
cat("\nSmallest and largest numbers in each column:\n")
print(column_min_max)
# Finding smallest and largest numbers in the matrix
global_min_max <- find_global_min_max(input_matrix)
cat("\nSmallest and largest numbers in the matrix:\n")
print(global_min_max)
# Function to find the smallest and largest numbers in a vector
find_min_max <- function(vector) {
return(c(min(vector), max(vector)))
}
# Function to find the smallest and largest numbers in each line of a matrix
find_min_max_per_line <- function(matrix) {
apply(matrix, 1, find_min_max)
}
# Function to find the smallest and largest numbers in each column of a matrix
find_min_max_per_column <- function(matrix) {
apply(matrix, 2, find_min_max)
}
# Function to find the smallest and largest numbers in a matrix
find_global_min_max <- function(matrix) {
c(min(matrix), max(matrix))
}
# Sample input matrix
input_matrix <- matrix(c(5, 10, 3, 8, 2, 7, 1, 9, 4, 6), nrow = 5, byrow = TRUE)
# Finding smallest and largest numbers in each line
line_min_max <- find_min_max_per_line(input_matrix)
cat("Smallest and largest numbers in each line:\n")
print(line_min_max)
# Finding smallest and largest numbers in each column
column_min_max <- find_min_max_per_column(input_matrix)
cat("\nSmallest and largest numbers in each column:\n")
print(column_min_max)
# Finding smallest and largest numbers in the matrix
global_min_max <- find_global_min_max(input_matrix)
cat("\nSmallest and largest numbers in the matrix:\n")
print(global_min_max)
# Load the ggplot2 package
library(ggplot2)
# Create a sequence of x values
x <- seq(-10, 10, length.out = 100)
# Create wave functions for different frequencies and amplitudes
wave1 <- sin(x)
wave2 <- 0.5 * sin(2*x)
wave3 <- 0.3 * sin(3*x)
# Create a data frame to combine the waves
wave_data <- data.frame(x, wave1, wave2, wave3)
# Create a plot using ggplot2
wave_plot <- ggplot(wave_data, aes(x)) +
geom_line(aes(y = wave1), color = "blue") +
geom_line(aes(y = wave2), color = "green") +
geom_line(aes(y = wave3), color = "red") +
labs(title = "Water Waves",
x = "X-axis",
y = "Amplitude") +
theme_minimal()
# Display the plot
print(wave_plot)
# Create wave functions for different frequencies and amplitudes
install.packages("rgl")
library(rgl)
# Create a grid of vertices
n <- 50  # Number of vertices in each dimension
x <- seq(-1, 1, length.out = n)
y <- seq(-1, 1, length.out = n)
grid <- expand.grid(x, y)
# Function to calculate the height of the wave at a given point
calculate_wave <- function(x, y, t) {
amplitude <- 0.1
frequency <- 3
return(amplitude * sin(frequency * (x + y) + t))
}
# Create a function to update the plot
update_plot <- function() {
clear3d()
t <- Sys.time()
z <- calculate_wave(grid$Var1, grid$Var2, t)
open3d()
surface3d(x = x, y = y, z = matrix(z, n, n), col = "blue", alpha = 0.8)
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z", main = "3D Water Wave Simulation")
Sys.sleep(0.05)
play3d(spin3d(axis = c(0, 0, 1), rpm = 10), duration = 1)
close3d()
}
# Create the initial plot
update_plot()
# Load the ggplot2 package
library(ggplot2)
# Create a sequence of x values
x <- seq(-10, 10, length.out = 100)
# Create wave functions for different frequencies and amplitudes
install.packages("rgl")
library(rgl)
# Function to calculate the height of the wave at a given point
calculate_wave <- function(x, y, t) {
amplitude <- 0.1
frequency <- 3
return(amplitude * sin(frequency * (x + y) + t))
}
# Create a function to update the plot
update_plot <- function() {
clear3d()
t <- Sys.time()
z <- calculate_wave(grid$Var1, grid$Var2, t)
open3d()
surface3d(x = x, y = y, z = matrix(z, n, n), col = "blue", alpha = 0.8)
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z", main = "3D Water Wave Simulation")
Sys.sleep(0.05)
play3d(spin3d(axis = c(0, 0, 1), rpm = 10), duration = 1)
close3d()
}
# Create the initial plot
update_plot()
install.packages("plotly")
library(plotly)
# Set up the grid
n <- 100
x <- seq(-10, 10, length.out = n)
y <- seq(-10, 10, length.out = n)
grid <- expand.grid(x, y)
z <- matrix(0, n, n)
# Create a function to update the waves
update_waves <- function(x0, y0) {
t <- Sys.time()
for (i in seq_len(n)) {
for (j in seq_len(n)) {
r <- sqrt((x[i] - x0)^2 + (y[j] - y0)^2)
z[i, j] <- 0.1 * sin(r + t)
}
}
}
# Create initial plot
update_waves(0, 0)
plot <- plot_ly(x = x, y = y, z = z, type = "surface")
# Add the interactive droplet
droplet <- plot_ly(x = 0, y = 0, z = 1, type = "scatter3d", mode = "markers",
marker = list(size = 10, color = "red"))
plot <- subplot(plot, droplet)
# Update the droplet position and waves over time
frames <- list()
for (frame in 1:200) {
x0 <- sin(frame / 10)  # Droplet's x-coordinate motion
y0 <- cos(frame / 10)  # Droplet's y-coordinate motion
update_waves(x0, y0)
frame_data <- list(z = z)
frames[[frame]] <- frame_data
}
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
# Set up the grid
n <- 100
install.packages("plotly")
install.packages("plotly")
rm(list = ls())
setwd("/Users/prafulpatil/Library/CloudStorage/Box-Box/Fall_23/BUAN 6337.001 - Predictive Analytics for Data Science - F23/Assignment_5")
# 1).
# Reading the CSV file and creating dummy columns
cc <- read_csv("cell2cell.csv") %>%
select(last, total_, gender, child, youth, cook, do_it, reference, art, geog, buyer) %>%
mutate(
buyer = ifelse(buyer == "yes", 1, 0),
gender = ifelse(gender == "M", 1, 0)
)
# 1).
# Reading the CSV file and creating dummy columns
cc <- read_csv("cell2cell.csv")
library(tidyverse)
library(readr)
library(dplyr)
library(ggplot2)
# 1).
# Reading the CSV file and creating dummy columns
cc <- read_csv("cell2cell.csv")
View(cc)
# 1).
# A).
# a)
# Read in the CSV file
cell2cell <- read.csv("path/to/your/cell2cell.csv")
setwd("/Users/prafulpatil/Library/CloudStorage/Box-Box/Fall_23/BUAN 6337.001 - Predictive Analytics for Data Science - F23/Assignment_5")
# 1).
# A).
# a)
# Read in the CSV file
cell2cell <- read.csv("path/to/your/cell2cell.csv")
# 1).
# A).
# a)
# Read in the CSV file
cell2cell <- read.csv("pcell2cell.csv")
# 1).
# A).
# a)
# Read in the CSV file
cell2cell <- read.csv("pcell2cell.csv")
# 1).
# A).
# a)
# Read in the CSV file
cell2cell <- read.csv("cell2cell.csv")
rm(cc)
# Get the total number of customers (rows)
total_customers <- nrow(cell2cell)
total_customers
# b)
# Count how many are in the calibration set
calibration_count <- sum(cell2cell$calibrat == 1)
# Count how many are in the validation set
validation_count <- sum(cell2cell$calibrat == 0)
calibration_count
validation_count
calibration_count +
validation_count
calibration_count +
validation_count
calibration_count
validation_count
# c) Churn rate in calibration set
calibration_churn_rate <- mean(data$churn[data$calibrat == 1])
# c) Churn rate in calibration set
calibration_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 1])
# d) Churn rate in validation set
validation_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 0])
# Results
cat("Total number of customers:", total_customers, "\n")
cat("Customers in calibration set:", calibration_count, "\n")
cat("Customers in validation set:", validation_count, "\n")
cat("Churn rate in calibration set:", format(calibration_churn_rate, digits=6), "\n")
cat("Churn rate in validation set:", format(validation_churn_rate, digits=6), "\n")
# c) Churn rate in calibration set
calibration_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 1] == 1)
cat("Churn rate in calibration set:", format(calibration_churn_rate, digits=6), "\n")
# c) Churn rate in calibration set
calibration_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 1] == 0)
cat("Churn rate in calibration set:", format(calibration_churn_rate, digits=6), "\n")
# d) Churn rate in validation set
validation_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 0] == 0)
cat("Churn rate in validation set:", format(validation_churn_rate, digits=6), "\n")
# c) Churn rate in calibration set
calibration_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 1] == 1)
# d) Churn rate in validation set
validation_churn_rate <- mean(cell2cell$churn[cell2cell$calibrat == 0] == 1)
cat("Churn rate in calibration set:", format(calibration_churn_rate, digits=6), "\n")
cat("Churn rate in validation set:", format(validation_churn_rate, digits=6), "\n")
# 1).
# A).
# a)
# Read in the CSV file
data <- read.csv("cell2cell.csv")
# Get the total number of customers (rows)
total_customers <- nrow(data)
total_customers
# b)
# Count how many are in the calibration set
calibration_count <- sum(data$calibrat == 1)
# Count how many are in the validation set
validation_count <- sum(data$calibrat == 0)
calibration_count
validation_count
# c) Churn rate in calibration set
calibration_churn_rate <- mean(data$churn[data$calibrat == 1] == 1)
# d) Churn rate in validation set
validation_churn_rate <- mean(data$churn[data$calibrat == 0] == 1)
# Results
cat("Total number of customers:", total_customers, "\n")
cat("Customers in calibration set:", calibration_count, "\n")
cat("Customers in validation set:", validation_count, "\n")
cat("Churn rate in calibration set:", format(calibration_churn_rate, digits=6), "\n")
cat("Churn rate in validation set:", format(validation_churn_rate, digits=6), "\n")
# 1).
# B).
# a).
# Assuming data is your dataframe and dplyr is loaded
selected_data <- data %>%
select(churndep:recall, retcall, calibrat) # Adjusted to include 'retcall'
library(tidyverse)
library(readr)
library(dplyr)
library(ggplot2)
# 1).
# B).
# a).
# Assuming data is your dataframe and dplyr is loaded
selected_data <- data %>%
select(churndep:recall, retcall, calibrat) # Adjusted to include 'retcall'
View(cell2cell)
# 1).
# B).
# a).
# Assuming data is your dataframe and dplyr is loaded
selected_data <- data %>%
select(churndep, revenue:retcall, calibrat) # Adjusted to include 'retcall'
# 1).
# B).
# a).
# Assuming data is your dataframe and dplyr is loaded
Data <- data %>%
select(churndep, revenue:retcall, calibrat) # Adjusted to include 'retcall'
rm(selected_data)
# b).
# Split the data into training and validation sets
training_set <- Data %>%
filter(calibrat == 1) %>%
select(-calibrat)
validation_set <- Data %>%
filter(calibrat == 0) %>%
select(-calibrat)
dim(Data)
dim(data)
# c) Running logistic model for training dataset
logistic_model <- glm(churndep ~ ., data = training_set, family = binomial)
# Summarizing the model to check coefficients and p-values
summary(logistic_model)
# Odds ratio sorted in descending order
sorted_odds_desc <- sort(exp(coef(logistic_model)), decreasing = TRUE)
sorted_odds_desc
summary(sorted_odds_desc)
# Odds ratio sorted in descending order
sorted_odds_desc <- sort(exp(coef(logistic_model)), decreasing = TRUE)
sorted_odds_desc
sorted_by_p_value <- model_summary$coefficients[order(model_summary$coefficients[, "Pr(>|z|)"]), ]
sorted_by_p_value <- summary(logistic_model)$coefficients[order(model_summary$coefficients[, "Pr(>|z|)"]), ]
sorted_by_p_value <- logistic_model$coefficients[order(model_summary$coefficients[, "Pr(>|z|)"]), ]
sorted_by_p_value <- logistic_model$coefficients[order(logistic_model$coefficients[, "Pr(>|z|)"]), ]
# Summarizing the model to check coefficients and p-values
summary_logistic <- summary(logistic_model)
sorted_by_p_value <- summary_logistic$coefficients[order(summary_logistic$coefficients[, "Pr(>|z|)"]), ]
sorted_by_p_value
sorted_combined <- cbind(OddsRatio = sorted_odds_desc, pvalue = summary_logistic$coefficients[names(sorted_odds_desc), "Pr(>|z|)"])
sorted_combined
# Summarizing the model to check coefficients and p-values
summary_logistic <- summary(logistic_model)
summary_logistic
# Odds ratio with p values
sorted_combined <- cbind(OddsRatio = sorted_odds_desc, pvalue = summary_logistic$coefficients[names(sorted_odds_desc), "Pr(>|z|)"])
sorted_combined
sorted_odds_desc
top_bottom_odds <- c(head(sorted_odds_desc, 2), tail(sorted_odds_desc, 2))
top_bottom_odds
top_bottom_odds <- c(head(names(sorted_odds_desc), 2), tail(names(sorted_odds_desc), 2))
top_bottom_odds
top_bottom_pvalues <- summary_logistic$coefficients[top_bottom_odds, "Pr(>|z|)"]
top_bottom_combined <- data.frame(OddsRatio = sorted_odds_desc[top_bottom_odds], pvalue = top_bottom_pvalues)
top_bottom_combined
top_bottom_pvalues
top_bottom_odds
# P value and Odds ratio of Top and Bottom two variables
sorted_odds_desc <- sort(exp(coef(logistic_model)), decreasing = TRUE)
sorted_odds_desc
# P value and Odds ratio of Top and Bottom two variables
top_bottom_odds_ratios <- c(head(sorted_odds_desc, 2), tail(sorted_odds_desc, 2))
top_bottom_pvalues <- summary_logistic$coefficients[top_bottom_odds, "Pr(>|z|)"]
top_bottom_odds_ratios
top_bottom_pvalues
# P value and Odds ratio of Top and Bottom two variables
sorted_odds_desc <- sort(exp(coef(logistic_model)), decreasing = TRUE)
top_bottom_odds <- c(head(sorted_odds_desc, 2), tail(sorted_odds_desc, 2))
top_bottom_pvalues <- summary_logistic$coefficients[top_bottom_odds, "Pr(>|z|)"]
top_bottom_odds
top_bottom_pvalues
top_bottom_pvalues <- summary(logistic_model)$coefficients[c(names(head(sorted_odds_desc, 2)), names(tail(sorted_odds_desc, 2))), "Pr(>|z|)"]
top_bottom_pvalues
top_bottom_odds
top_bottom_pvalues
# P value and Odds ratio of Top and Bottom two variables
sorted_odds_desc <- sort(exp(coef(logistic_model)), decreasing = TRUE)
top_bottom_odds <- c(head(sorted_odds_desc, 2), tail(sorted_odds_desc, 2))
top_bottom_pvalues <- summary(logistic_model)$coefficients[c(names(head(sorted_odds_desc, 2)), names(tail(sorted_odds_desc, 2))), "Pr(>|z|)"]
top_bottom_odds
top_bottom_pvalues
top_bottom_pvalues <- summary_logistic$coefficients[c(names(head(sorted_odds_desc, 2)), names(tail(sorted_odds_desc, 2))), "Pr(>|z|)"]
top_bottom_odds
top_bottom_pvalues
# d)
# Predict attrition probabilities
validation_probabilities <- predict(logistic_model, newdata = validation_set, type = "response")
# Create a data frame with the probabilities
validation_set_with_prob <- data.frame(validation_set, AttritionProb = validation_probabilities)
# Arrange in descending order of probabilities and take the top 5
top_attrition_probs <- head(validation_set_with_prob[order(validation_set_with_prob$AttritionProb, decreasing = TRUE), ], 5)
top_attrition_probs
view(top_attrition_probs)
